<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Examples on </title>
    <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/</link>
    <description>Recent content in Examples on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create New Fix Version</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/new_fix_version/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/new_fix_version/</guid>
      <description>Add new fix version to existing issue.  JQL Search. Create new version. Edit an issue.  node { stage(&amp;#39;JIRA&amp;#39;) { def searchResults = jiraJqlSearch jql: &amp;#34;project = TEST AND issuekey = &amp;#39;TEST-1&amp;#39;&amp;#34; def issues = searchResults.data.issues for (i = 0; i &amp;lt;issues.size(); i++) { def fixVersion = jiraNewVersion version: [name: &amp;#34;new-fix-version-1.0&amp;#34;, project: &amp;#34;TEST&amp;#34;] def testIssue = [fields: [fixVersions: [fixVersion.data]]] response = jiraEditIssue idOrKey: issues[i].key, issue: testIssue } } } </description>
    </item>
    
    <item>
      <title>Append Fix Version</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/append_fix_version/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/append_fix_version/</guid>
      <description>Append new fix version to existing issue.  JQL Search. Create new version. Edit an issue.  node { stage(&amp;#39;JIRA&amp;#39;) { def searchResults = jiraJqlSearch jql: &amp;#34;project = TEST AND issuekey = &amp;#39;TEST-1&amp;#39;&amp;#34; def issues = searchResults.data.issues for (i = 0; i &amp;lt;issues.size(); i++) { def result = jiraGetIssue idOrKey: issues[i].key def newVersion = jiraNewVersion version: [name: &amp;#34;new-fix-version-1.1&amp;#34;, project: &amp;#34;TEST&amp;#34;] def fixVersions = result.data.fields.fixVersions &amp;lt;&amp;lt; newVersion.data def testIssue = [fields: [fixVersions: fixVersions]] response = jiraEditIssue idOrKey: issues[i].</description>
    </item>
    
    <item>
      <title>Releasing a Project?</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/release_project/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/release_project/</guid>
      <description>Releasing a project? For instance, if you are releasing more than one project and you want to create a release review jira issue, add Description, Fix version, comment on the issue with error message for a failure in the release process or close the issue, if release is successful.
 Create new Release review JIRA. Release your project. Create new fix version, just to tag a release review JIRA. Close issue if when releasing that project is successful.</description>
    </item>
    
  </channel>
</rss>