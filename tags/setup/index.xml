<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Setup on </title>
    <link>https://jenkinsci.github.io/jira-steps-plugin/tags/setup/</link>
    <description>Recent content in Setup on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jenkinsci.github.io/jira-steps-plugin/tags/setup/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Authentication</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/config/authentication/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/config/authentication/</guid>
      <description>Authentication This plugin supports both Basic and OAuth, OAuth is preferred over the Basic authentication.
Basic Authentication  Goto Manage Jenkins &amp;gt; Configure System &amp;gt; JIRA Steps &amp;gt; Add Site &amp;gt; Choose Basic.  Name = Jira Site Name URL = Jira Site URL User Name = Jira Account Username Password = Jira Account Password   Please take note that above screenshot missing **ReadTimeout(ms)**  OAuth Authentication  Follow the jira-rest-api-oauth-authentication guide to setup OAuth Authentication.</description>
    </item>
    
    <item>
      <title>Create New Fix Version</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/new_fix_version/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/new_fix_version/</guid>
      <description> Add new fix version to existing issue.  JQL Search. Create new version. Edit an issue.  node { stage(&#39;JIRA&#39;) { def searchResults = jiraJqlSearch jql: &amp;quot;project = TEST AND issuekey = &#39;TEST-1&#39;&amp;quot; def issues = searchResults.data.issues for (i = 0; i &amp;lt;issues.size(); i++) { def fixVersion = jiraNewVersion version: [name: &amp;quot;new-fix-version-1.0&amp;quot;, project: &amp;quot;TEST&amp;quot;] def testIssue = [fields: [fixVersions: [fixVersion.data]]] response = jiraEditIssue idOrKey: issues[i].key, issue: testIssue } } }  </description>
    </item>
    
    <item>
      <title>Install</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/install/</link>
      <pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/install/</guid>
      <description> Jenkins provides a couple of different methods for installing plugins
Installing from UI.  Installing Plugin From Web UI Updating Plugin  Manual installation - For snapshots  Clone the repository. Run mvn package to build a deployable hpi bundle for Jenkins. jira-steps.hpi file can be found in jira-steps-plugin/target folder. For more information Advanced installation  This plugin **`REQUIRES JDK 1.8`** to build.  </description>
    </item>
    
    <item>
      <title>Append Fix Version</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/append_fix_version/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/append_fix_version/</guid>
      <description>Append new fix version to existing issue.  JQL Search. Create new version. Edit an issue.  node { stage(&#39;JIRA&#39;) { def searchResults = jiraJqlSearch jql: &amp;quot;project = TEST AND issuekey = &#39;TEST-1&#39;&amp;quot; def issues = searchResults.data.issues for (i = 0; i &amp;lt;issues.size(); i++) { def result = jiraGetIssue idOrKey: issues[i].key def newVersion = jiraNewVersion version: [name: &amp;quot;new-fix-version-1.1&amp;quot;, project: &amp;quot;TEST&amp;quot;] def fixVersions = result.data.fields.fixVersions &amp;lt;&amp;lt; newVersion.data def testIssue = [fields: [fixVersions: fixVersions]] response = jiraEditIssue idOrKey: issues[i].</description>
    </item>
    
    <item>
      <title>Common Config</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/config/common/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/config/common/</guid>
      <description>Optional Params for all Steps.  site - Optional param which will override JIRA_SITE global variable. failOnError - is optional and by default it is true.  When set to true, then the step will abort the job as a failure when there is an error sending message. To make it false, it should always be provided as global environment variable `JIRA_FAIL_ON_ERROR`.  Global Environment Variables.  JIRA_SITE - Global variable to set default site for all JIRA steps.</description>
    </item>
    
    <item>
      <title>Jenkins Script</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/config/script/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/config/script/</guid>
      <description>Automate configuring via Jenkins Script Console The following Jenkins Script Console script will automatically configure the global settings of this plugin.
import net.sf.json.JSONArray import net.sf.json.JSONObject import org.thoughtslive.jenkins.plugins.jira.JiraStepsConfig import org.thoughtslive.jenkins.plugins.jira.Site //global user-defined configuration JSONArray sitesConf = [ [ name: &#39;another&#39;, url: &#39;http://example.com&#39;, timeout: 10000, readTimeout: 10000, loginType: &#39;BASIC&#39;, userName: &#39;foo&#39;, password: &#39;some pass&#39; ], [ name: &#39;moar jira&#39;, url: &#39;http://example.com&#39;, timeout: 10000, readTimeout: 10000, loginType: &#39;OAUTH&#39;, consumerKey: &#39;my consumer key&#39;, privateKey: &#39;my private key&#39;, secret: &#39;super secret&#39;, token: &#39;my token&#39; ] ] as JSONArray //get global Jenkins configuration JiraStepsConfig.</description>
    </item>
    
    <item>
      <title>Releasing a Project?</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/release_project/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/release_project/</guid>
      <description>Releasing a project? For instance, if you are releasing more than one project and you want to create a release review jira issue, add Description, Fix version, comment on the issue with error message for a failure in the release process or close the issue, if release is successful.
 Create new Release review JIRA. Release your project. Create new fix version, just to tag a release review JIRA. Close issue if when releasing that project is successful.</description>
    </item>
    
    <item>
      <title>Configuration as Code Plugin</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/config/casc/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/config/casc/</guid>
      <description> Automate configuring via Configuration as Code Plugin The following snippet will automatically configure the global settings of this plugin.
unclassified: jiraStepsConfig: sites: - name: &#39;another&#39; url: &#39;http://example.com&#39; timeout: 10000 readTimeout: 10000 loginType: &#39;BASIC&#39; userName: &#39;foo&#39; password: &#39;some pass&#39; - name: &#39;moar jira&#39; url: &#39;http://example.com&#39; timeout: 10000 readTimeout: 10000 loginType: &#39;OAUTH&#39; consumerKey: &#39;my consumer key&#39; privateKey: &#39;my private key&#39; secret: &#39;super secret&#39; token: &#39;my token&#39;  </description>
    </item>
    
  </channel>
</rss>