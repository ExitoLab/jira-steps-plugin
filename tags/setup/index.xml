<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Setup on </title>
    <link>https://jenkinsci.github.io/jira-steps-plugin/tags/setup/</link>
    <description>Recent content in Setup on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jenkinsci.github.io/jira-steps-plugin/tags/setup/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Authentication</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/config/authentication/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/config/authentication/</guid>
      <description>Authentication This plugin supports both Basic and OAuth, OAuth is preferred over the Basic authentication.
Basic Authentication  Goto Manage Jenkins &amp;gt; Configure System &amp;gt; JIRA Steps &amp;gt; Add Site &amp;gt; Choose Basic.  Name = Jira Site Name URL = Jira Site URL User Name = Jira Account Username Password = Jira Account Password    role=&amp;quot;alert&amp;quot;&amp;gt; Please take note that above screenshot missing ReadTimeout(ms) OAuth Authentication  Follow the jira-rest-api-oauth-authentication guide to setup OAuth Authentication.</description>
    </item>
    
    <item>
      <title>Create New Fix Version</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/new_fix_version/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/new_fix_version/</guid>
      <description>Add new fix version to existing issue.  JQL Search. Create new version. Edit an issue.  node { stage(&amp;#39;JIRA&amp;#39;) { def searchResults = jiraJqlSearch jql: &amp;#34;project = TEST AND issuekey = &amp;#39;TEST-1&amp;#39;&amp;#34; def issues = searchResults.data.issues for (i = 0; i &amp;lt;issues.size(); i++) { def fixVersion = jiraNewVersion version: [name: &amp;#34;new-fix-version-1.0&amp;#34;, project: &amp;#34;TEST&amp;#34;] def testIssue = [fields: [fixVersions: [fixVersion.data]]] response = jiraEditIssue idOrKey: issues[i].key, issue: testIssue } } } </description>
    </item>
    
    <item>
      <title>Install</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/install/</link>
      <pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/install/</guid>
      <description>Jenkins provides a couple of different methods for installing plugins
Installing from UI.  Installing Plugin From Web UI Updating Plugin  Manual installation - For snapshots  Clone the repository. Run mvn package to build a deployable hpi bundle for Jenkins. jira-steps.hpi file can be found in jira-steps-plugin/target folder. For more information Advanced installation  </description>
    </item>
    
    <item>
      <title>Append Fix Version</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/append_fix_version/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/append_fix_version/</guid>
      <description>Append new fix version to existing issue.  JQL Search. Create new version. Edit an issue.  node { stage(&amp;#39;JIRA&amp;#39;) { def searchResults = jiraJqlSearch jql: &amp;#34;project = TEST AND issuekey = &amp;#39;TEST-1&amp;#39;&amp;#34; def issues = searchResults.data.issues for (i = 0; i &amp;lt;issues.size(); i++) { def result = jiraGetIssue idOrKey: issues[i].key def newVersion = jiraNewVersion version: [name: &amp;#34;new-fix-version-1.1&amp;#34;, project: &amp;#34;TEST&amp;#34;] def fixVersions = result.data.fields.fixVersions &amp;lt;&amp;lt; newVersion.data def testIssue = [fields: [fixVersions: fixVersions]] response = jiraEditIssue idOrKey: issues[i].</description>
    </item>
    
    <item>
      <title>Common Config</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/config/common/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/config/common/</guid>
      <description>Optional Params for all Steps.  site - Optional param which will override JIRA_SITE global variable. failOnError - is optional and by default it is true.  Global Environment Variables.  JIRA_SITE - Global variable to set default site for all JIRA steps. JIRA_FAIL_ON_ERROR - By default all steps fail the job when there is an error, by setting this to false all steps won&amp;rsquo;t fail the job.  Common Response &amp;amp; Error Handling.</description>
    </item>
    
    <item>
      <title>Jenkins Script</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/config/script/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/config/script/</guid>
      <description>Automate configuring via Jenkins Script Console The following Jenkins Script Console script will automatically configure the global settings of this plugin.
import net.sf.json.JSONArray import net.sf.json.JSONObject import org.thoughtslive.jenkins.plugins.jira.JiraStepsConfig import org.thoughtslive.jenkins.plugins.jira.Site //global user-defined configuration JSONArray sitesConf = [ [ name: &amp;#39;another&amp;#39;, url: &amp;#39;http://example.com&amp;#39;, timeout: 10000, readTimeout: 10000, loginType: &amp;#39;BASIC&amp;#39;, userName: &amp;#39;foo&amp;#39;, password: &amp;#39;some pass&amp;#39; ], [ name: &amp;#39;moar jira&amp;#39;, url: &amp;#39;http://example.com&amp;#39;, timeout: 10000, readTimeout: 10000, loginType: &amp;#39;OAUTH&amp;#39;, consumerKey: &amp;#39;my consumer key&amp;#39;, privateKey: &amp;#39;my private key&amp;#39;, secret: &amp;#39;super secret&amp;#39;, token: &amp;#39;my token&amp;#39; ] ] as JSONArray //get global Jenkins configuration JiraStepsConfig.</description>
    </item>
    
    <item>
      <title>Releasing a Project?</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/release_project/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/examples/release_project/</guid>
      <description>Releasing a project? For instance, if you are releasing more than one project and you want to create a release review jira issue, add Description, Fix version, comment on the issue with error message for a failure in the release process or close the issue, if release is successful. JIRA transitions for any given ticket can be found via this endpoint: /rest/api/2/issue/${issueIdOrKey}/transitions.
 Create new Release review JIRA. Release your project.</description>
    </item>
    
    <item>
      <title>Configuration as Code Plugin</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/getting-started/config/casc/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/getting-started/config/casc/</guid>
      <description>Automate configuring via Configuration as Code Plugin The following snippet will automatically configure the global settings of this plugin.
unclassified: jiraStepsConfig: sites: - name: &amp;#39;another&amp;#39; url: &amp;#39;http://example.com&amp;#39; timeout: 10000 readTimeout: 10000 loginType: &amp;#39;BASIC&amp;#39; userName: &amp;#39;foo&amp;#39; password: &amp;#39;some pass&amp;#39; - name: &amp;#39;moar jira&amp;#39; url: &amp;#39;http://example.com&amp;#39; timeout: 10000 readTimeout: 10000 loginType: &amp;#39;OAUTH&amp;#39; consumerKey: &amp;#39;my consumer key&amp;#39; privateKey: &amp;#39;my private key&amp;#39; secret: &amp;#39;super secret&amp;#39; token: &amp;#39;my token&amp;#39; </description>
    </item>
    
  </channel>
</rss>