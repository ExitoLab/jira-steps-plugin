<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Component on </title>
    <link>https://jenkinsci.github.io/jira-steps-plugin/steps/component/</link>
    <description>Recent content in Component on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jenkinsci.github.io/jira-steps-plugin/steps/component/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GetComponent</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/steps/component/jira_get_component/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/steps/component/jira_get_component/</guid>
      <description>jiraGetComponent This step queries a particular component from the provided JIRA site.
Input  id - componentId. site - Optional, default: JIRA_SITE environment variable. failOnError - Optional. default: true.  Output  Each step generates generic output, please refer to this link for more information. The api response of this jira_get_component step can be reused later in your script by doing response.data.required_field_name. You can see some example scenarios here All the available fields for a jira response can be found in JIRA API documentation depending on your JIRA version.</description>
    </item>
    
    <item>
      <title>NewComponent</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/steps/component/jira_new_component/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/steps/component/jira_new_component/</guid>
      <description>jiraNewComponent Create new component based on given input, which should have some minimal information on that object.
Input  component - component to be created. site - Optional, default: JIRA_SITE environment variable. failOnError - Optional. default: true. auditLog - Optional. default: true. Append the build url and build user name to the description.  Output  Each step generates generic output, please refer to this link for more information. The api response of this jira_get_new_component step can be reused later in your script by doing response.</description>
    </item>
    
    <item>
      <title>EditComponent</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/steps/component/jira_edit_component/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/steps/component/jira_edit_component/</guid>
      <description>jiraEditComponent Edit component based on given input, which should have some minimal information on that object.
Input  id - component id. (Note: Applicable only from version 1.3.0) component - component to be edited. site - Optional, default: JIRA_SITE environment variable. failOnError - Optional. default: true. auditLog - Optional. default: true. Append the build url and build user name to the description.  Output  Each step generates generic output, please refer to this link for more information.</description>
    </item>
    
    <item>
      <title>GetComponentIssueCount</title>
      <link>https://jenkinsci.github.io/jira-steps-plugin/steps/component/jira_get_component_issue_count/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkinsci.github.io/jira-steps-plugin/steps/component/jira_get_component_issue_count/</guid>
      <description>jiraGetComponentIssueCount This step queries a particular component&#39;s issue-count.
Input  id - componentId. site - Optional, default: JIRA_SITE environment variable. failOnError - Optional. default: true.  Output  Each step generates generic output, please refer to this link for more information. The api response of this jira_get_component_issue_count step can be reused later in your script by doing response.data.required_field_name. You can see some example scenarios here All the available fields for a jira response can be found in JIRA API documentation depending on your JIRA version.</description>
    </item>
    
  </channel>
</rss>